// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Message.proto

package com.aihangxunxi.aitalk.im.protocol.buffers;

public interface MessageOrBuilder extends
    // @@protoc_insertion_point(interface_extends:com.aihangxunxi.aitalk.im.protocol.buffers.Message)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   *头部相关字段编号范围:1～10
   * </pre>
   *
   * <code>uint64 magic = 1;</code>
   * @return The magic.
   */
  long getMagic();

  /**
   * <pre>
   * 版本号
   * </pre>
   *
   * <code>uint32 version = 2;</code>
   * @return The version.
   */
  int getVersion();

  /**
   * <pre>
   * 消息协议类型，操作码
   * </pre>
   *
   * <code>.com.aihangxunxi.aitalk.im.protocol.buffers.OpCode op_code = 3;</code>
   * @return The enum numeric value on the wire for opCode.
   */
  int getOpCodeValue();
  /**
   * <pre>
   * 消息协议类型，操作码
   * </pre>
   *
   * <code>.com.aihangxunxi.aitalk.im.protocol.buffers.OpCode op_code = 3;</code>
   * @return The opCode.
   */
  com.aihangxunxi.aitalk.im.protocol.buffers.OpCode getOpCode();

  /**
   * <pre>
   *序列号,主要用于保证Request和Ack,Notify的seq值必须相同，使得发送端可以进行事务匹配处理
   * </pre>
   *
   * <code>uint64 seq = 4;</code>
   * @return The seq.
   */
  long getSeq();

  /**
   * <pre>
   * 连接相关11～20
   * </pre>
   *
   * <code>.com.aihangxunxi.aitalk.im.protocol.buffers.AuthRequest auth_request = 11;</code>
   * @return Whether the authRequest field is set.
   */
  boolean hasAuthRequest();
  /**
   * <pre>
   * 连接相关11～20
   * </pre>
   *
   * <code>.com.aihangxunxi.aitalk.im.protocol.buffers.AuthRequest auth_request = 11;</code>
   * @return The authRequest.
   */
  com.aihangxunxi.aitalk.im.protocol.buffers.AuthRequest getAuthRequest();
  /**
   * <pre>
   * 连接相关11～20
   * </pre>
   *
   * <code>.com.aihangxunxi.aitalk.im.protocol.buffers.AuthRequest auth_request = 11;</code>
   */
  com.aihangxunxi.aitalk.im.protocol.buffers.AuthRequestOrBuilder getAuthRequestOrBuilder();

  /**
   * <pre>
   *    Ping ping = 13;
   *    Pong pong = 14;
   *    Disconnect disconnect = 15;
   * </pre>
   *
   * <code>.com.aihangxunxi.aitalk.im.protocol.buffers.AuthAck auth_ack = 12;</code>
   * @return Whether the authAck field is set.
   */
  boolean hasAuthAck();
  /**
   * <pre>
   *    Ping ping = 13;
   *    Pong pong = 14;
   *    Disconnect disconnect = 15;
   * </pre>
   *
   * <code>.com.aihangxunxi.aitalk.im.protocol.buffers.AuthAck auth_ack = 12;</code>
   * @return The authAck.
   */
  com.aihangxunxi.aitalk.im.protocol.buffers.AuthAck getAuthAck();
  /**
   * <pre>
   *    Ping ping = 13;
   *    Pong pong = 14;
   *    Disconnect disconnect = 15;
   * </pre>
   *
   * <code>.com.aihangxunxi.aitalk.im.protocol.buffers.AuthAck auth_ack = 12;</code>
   */
  com.aihangxunxi.aitalk.im.protocol.buffers.AuthAckOrBuilder getAuthAckOrBuilder();

  /**
   * <pre>
   * 消息相关21～50
   * </pre>
   *
   * <code>.com.aihangxunxi.aitalk.im.protocol.buffers.MsgRequest msg_request = 20;</code>
   * @return Whether the msgRequest field is set.
   */
  boolean hasMsgRequest();
  /**
   * <pre>
   * 消息相关21～50
   * </pre>
   *
   * <code>.com.aihangxunxi.aitalk.im.protocol.buffers.MsgRequest msg_request = 20;</code>
   * @return The msgRequest.
   */
  com.aihangxunxi.aitalk.im.protocol.buffers.MsgRequest getMsgRequest();
  /**
   * <pre>
   * 消息相关21～50
   * </pre>
   *
   * <code>.com.aihangxunxi.aitalk.im.protocol.buffers.MsgRequest msg_request = 20;</code>
   */
  com.aihangxunxi.aitalk.im.protocol.buffers.MsgRequestOrBuilder getMsgRequestOrBuilder();

  public com.aihangxunxi.aitalk.im.protocol.buffers.Message.PayloadCase getPayloadCase();
}
