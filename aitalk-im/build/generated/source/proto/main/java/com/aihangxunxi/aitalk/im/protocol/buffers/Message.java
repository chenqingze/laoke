// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Message.proto

package com.aihangxunxi.aitalk.im.protocol.buffers;

/**
 * Protobuf type {@code com.aihangxunxi.aitalk.im.protocol.buffers.Message}
 */
public final class Message extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:com.aihangxunxi.aitalk.im.protocol.buffers.Message)
    MessageOrBuilder {
private static final long serialVersionUID = 0L;
  // Use Message.newBuilder() to construct.
  private Message(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private Message() {
    opCode_ = 0;
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new Message();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private Message(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 8: {

            magic_ = input.readUInt64();
            break;
          }
          case 16: {

            version_ = input.readUInt32();
            break;
          }
          case 24: {
            int rawValue = input.readEnum();

            opCode_ = rawValue;
            break;
          }
          case 32: {

            seq_ = input.readUInt64();
            break;
          }
          case 90: {
            com.aihangxunxi.aitalk.im.protocol.buffers.AuthRequest.Builder subBuilder = null;
            if (payloadCase_ == 11) {
              subBuilder = ((com.aihangxunxi.aitalk.im.protocol.buffers.AuthRequest) payload_).toBuilder();
            }
            payload_ =
                input.readMessage(com.aihangxunxi.aitalk.im.protocol.buffers.AuthRequest.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.aihangxunxi.aitalk.im.protocol.buffers.AuthRequest) payload_);
              payload_ = subBuilder.buildPartial();
            }
            payloadCase_ = 11;
            break;
          }
          case 98: {
            com.aihangxunxi.aitalk.im.protocol.buffers.AuthAck.Builder subBuilder = null;
            if (payloadCase_ == 12) {
              subBuilder = ((com.aihangxunxi.aitalk.im.protocol.buffers.AuthAck) payload_).toBuilder();
            }
            payload_ =
                input.readMessage(com.aihangxunxi.aitalk.im.protocol.buffers.AuthAck.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.aihangxunxi.aitalk.im.protocol.buffers.AuthAck) payload_);
              payload_ = subBuilder.buildPartial();
            }
            payloadCase_ = 12;
            break;
          }
          case 162: {
            com.aihangxunxi.aitalk.im.protocol.buffers.MsgRequest.Builder subBuilder = null;
            if (payloadCase_ == 20) {
              subBuilder = ((com.aihangxunxi.aitalk.im.protocol.buffers.MsgRequest) payload_).toBuilder();
            }
            payload_ =
                input.readMessage(com.aihangxunxi.aitalk.im.protocol.buffers.MsgRequest.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.aihangxunxi.aitalk.im.protocol.buffers.MsgRequest) payload_);
              payload_ = subBuilder.buildPartial();
            }
            payloadCase_ = 20;
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.aihangxunxi.aitalk.im.protocol.buffers.MessageOuterClass.internal_static_com_aihangxunxi_aitalk_im_protocol_buffers_Message_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.aihangxunxi.aitalk.im.protocol.buffers.MessageOuterClass.internal_static_com_aihangxunxi_aitalk_im_protocol_buffers_Message_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.aihangxunxi.aitalk.im.protocol.buffers.Message.class, com.aihangxunxi.aitalk.im.protocol.buffers.Message.Builder.class);
  }

  private int payloadCase_ = 0;
  private java.lang.Object payload_;
  public enum PayloadCase
      implements com.google.protobuf.Internal.EnumLite,
          com.google.protobuf.AbstractMessage.InternalOneOfEnum {
    AUTH_REQUEST(11),
    AUTH_ACK(12),
    MSG_REQUEST(20),
    PAYLOAD_NOT_SET(0);
    private final int value;
    private PayloadCase(int value) {
      this.value = value;
    }
    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static PayloadCase valueOf(int value) {
      return forNumber(value);
    }

    public static PayloadCase forNumber(int value) {
      switch (value) {
        case 11: return AUTH_REQUEST;
        case 12: return AUTH_ACK;
        case 20: return MSG_REQUEST;
        case 0: return PAYLOAD_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public PayloadCase
  getPayloadCase() {
    return PayloadCase.forNumber(
        payloadCase_);
  }

  public static final int MAGIC_FIELD_NUMBER = 1;
  private long magic_;
  /**
   * <pre>
   *头部相关字段编号范围:1～10
   * </pre>
   *
   * <code>uint64 magic = 1;</code>
   * @return The magic.
   */
  @java.lang.Override
  public long getMagic() {
    return magic_;
  }

  public static final int VERSION_FIELD_NUMBER = 2;
  private int version_;
  /**
   * <pre>
   * 版本号
   * </pre>
   *
   * <code>uint32 version = 2;</code>
   * @return The version.
   */
  @java.lang.Override
  public int getVersion() {
    return version_;
  }

  public static final int OP_CODE_FIELD_NUMBER = 3;
  private int opCode_;
  /**
   * <pre>
   * 消息协议类型，操作码
   * </pre>
   *
   * <code>.com.aihangxunxi.aitalk.im.protocol.buffers.OpCode op_code = 3;</code>
   * @return The enum numeric value on the wire for opCode.
   */
  @java.lang.Override public int getOpCodeValue() {
    return opCode_;
  }
  /**
   * <pre>
   * 消息协议类型，操作码
   * </pre>
   *
   * <code>.com.aihangxunxi.aitalk.im.protocol.buffers.OpCode op_code = 3;</code>
   * @return The opCode.
   */
  @java.lang.Override public com.aihangxunxi.aitalk.im.protocol.buffers.OpCode getOpCode() {
    @SuppressWarnings("deprecation")
    com.aihangxunxi.aitalk.im.protocol.buffers.OpCode result = com.aihangxunxi.aitalk.im.protocol.buffers.OpCode.valueOf(opCode_);
    return result == null ? com.aihangxunxi.aitalk.im.protocol.buffers.OpCode.UNRECOGNIZED : result;
  }

  public static final int SEQ_FIELD_NUMBER = 4;
  private long seq_;
  /**
   * <pre>
   *序列号,主要用于保证Request和Ack,Notify的seq值必须相同，使得发送端可以进行事务匹配处理
   * </pre>
   *
   * <code>uint64 seq = 4;</code>
   * @return The seq.
   */
  @java.lang.Override
  public long getSeq() {
    return seq_;
  }

  public static final int AUTH_REQUEST_FIELD_NUMBER = 11;
  /**
   * <pre>
   * 连接相关11～20
   * </pre>
   *
   * <code>.com.aihangxunxi.aitalk.im.protocol.buffers.AuthRequest auth_request = 11;</code>
   * @return Whether the authRequest field is set.
   */
  @java.lang.Override
  public boolean hasAuthRequest() {
    return payloadCase_ == 11;
  }
  /**
   * <pre>
   * 连接相关11～20
   * </pre>
   *
   * <code>.com.aihangxunxi.aitalk.im.protocol.buffers.AuthRequest auth_request = 11;</code>
   * @return The authRequest.
   */
  @java.lang.Override
  public com.aihangxunxi.aitalk.im.protocol.buffers.AuthRequest getAuthRequest() {
    if (payloadCase_ == 11) {
       return (com.aihangxunxi.aitalk.im.protocol.buffers.AuthRequest) payload_;
    }
    return com.aihangxunxi.aitalk.im.protocol.buffers.AuthRequest.getDefaultInstance();
  }
  /**
   * <pre>
   * 连接相关11～20
   * </pre>
   *
   * <code>.com.aihangxunxi.aitalk.im.protocol.buffers.AuthRequest auth_request = 11;</code>
   */
  @java.lang.Override
  public com.aihangxunxi.aitalk.im.protocol.buffers.AuthRequestOrBuilder getAuthRequestOrBuilder() {
    if (payloadCase_ == 11) {
       return (com.aihangxunxi.aitalk.im.protocol.buffers.AuthRequest) payload_;
    }
    return com.aihangxunxi.aitalk.im.protocol.buffers.AuthRequest.getDefaultInstance();
  }

  public static final int AUTH_ACK_FIELD_NUMBER = 12;
  /**
   * <pre>
   *    Ping ping = 13;
   *    Pong pong = 14;
   *    Disconnect disconnect = 15;
   * </pre>
   *
   * <code>.com.aihangxunxi.aitalk.im.protocol.buffers.AuthAck auth_ack = 12;</code>
   * @return Whether the authAck field is set.
   */
  @java.lang.Override
  public boolean hasAuthAck() {
    return payloadCase_ == 12;
  }
  /**
   * <pre>
   *    Ping ping = 13;
   *    Pong pong = 14;
   *    Disconnect disconnect = 15;
   * </pre>
   *
   * <code>.com.aihangxunxi.aitalk.im.protocol.buffers.AuthAck auth_ack = 12;</code>
   * @return The authAck.
   */
  @java.lang.Override
  public com.aihangxunxi.aitalk.im.protocol.buffers.AuthAck getAuthAck() {
    if (payloadCase_ == 12) {
       return (com.aihangxunxi.aitalk.im.protocol.buffers.AuthAck) payload_;
    }
    return com.aihangxunxi.aitalk.im.protocol.buffers.AuthAck.getDefaultInstance();
  }
  /**
   * <pre>
   *    Ping ping = 13;
   *    Pong pong = 14;
   *    Disconnect disconnect = 15;
   * </pre>
   *
   * <code>.com.aihangxunxi.aitalk.im.protocol.buffers.AuthAck auth_ack = 12;</code>
   */
  @java.lang.Override
  public com.aihangxunxi.aitalk.im.protocol.buffers.AuthAckOrBuilder getAuthAckOrBuilder() {
    if (payloadCase_ == 12) {
       return (com.aihangxunxi.aitalk.im.protocol.buffers.AuthAck) payload_;
    }
    return com.aihangxunxi.aitalk.im.protocol.buffers.AuthAck.getDefaultInstance();
  }

  public static final int MSG_REQUEST_FIELD_NUMBER = 20;
  /**
   * <pre>
   * 消息相关21～50
   * </pre>
   *
   * <code>.com.aihangxunxi.aitalk.im.protocol.buffers.MsgRequest msg_request = 20;</code>
   * @return Whether the msgRequest field is set.
   */
  @java.lang.Override
  public boolean hasMsgRequest() {
    return payloadCase_ == 20;
  }
  /**
   * <pre>
   * 消息相关21～50
   * </pre>
   *
   * <code>.com.aihangxunxi.aitalk.im.protocol.buffers.MsgRequest msg_request = 20;</code>
   * @return The msgRequest.
   */
  @java.lang.Override
  public com.aihangxunxi.aitalk.im.protocol.buffers.MsgRequest getMsgRequest() {
    if (payloadCase_ == 20) {
       return (com.aihangxunxi.aitalk.im.protocol.buffers.MsgRequest) payload_;
    }
    return com.aihangxunxi.aitalk.im.protocol.buffers.MsgRequest.getDefaultInstance();
  }
  /**
   * <pre>
   * 消息相关21～50
   * </pre>
   *
   * <code>.com.aihangxunxi.aitalk.im.protocol.buffers.MsgRequest msg_request = 20;</code>
   */
  @java.lang.Override
  public com.aihangxunxi.aitalk.im.protocol.buffers.MsgRequestOrBuilder getMsgRequestOrBuilder() {
    if (payloadCase_ == 20) {
       return (com.aihangxunxi.aitalk.im.protocol.buffers.MsgRequest) payload_;
    }
    return com.aihangxunxi.aitalk.im.protocol.buffers.MsgRequest.getDefaultInstance();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (magic_ != 0L) {
      output.writeUInt64(1, magic_);
    }
    if (version_ != 0) {
      output.writeUInt32(2, version_);
    }
    if (opCode_ != com.aihangxunxi.aitalk.im.protocol.buffers.OpCode.UNKNOWN.getNumber()) {
      output.writeEnum(3, opCode_);
    }
    if (seq_ != 0L) {
      output.writeUInt64(4, seq_);
    }
    if (payloadCase_ == 11) {
      output.writeMessage(11, (com.aihangxunxi.aitalk.im.protocol.buffers.AuthRequest) payload_);
    }
    if (payloadCase_ == 12) {
      output.writeMessage(12, (com.aihangxunxi.aitalk.im.protocol.buffers.AuthAck) payload_);
    }
    if (payloadCase_ == 20) {
      output.writeMessage(20, (com.aihangxunxi.aitalk.im.protocol.buffers.MsgRequest) payload_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (magic_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt64Size(1, magic_);
    }
    if (version_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(2, version_);
    }
    if (opCode_ != com.aihangxunxi.aitalk.im.protocol.buffers.OpCode.UNKNOWN.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(3, opCode_);
    }
    if (seq_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt64Size(4, seq_);
    }
    if (payloadCase_ == 11) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(11, (com.aihangxunxi.aitalk.im.protocol.buffers.AuthRequest) payload_);
    }
    if (payloadCase_ == 12) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(12, (com.aihangxunxi.aitalk.im.protocol.buffers.AuthAck) payload_);
    }
    if (payloadCase_ == 20) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(20, (com.aihangxunxi.aitalk.im.protocol.buffers.MsgRequest) payload_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.aihangxunxi.aitalk.im.protocol.buffers.Message)) {
      return super.equals(obj);
    }
    com.aihangxunxi.aitalk.im.protocol.buffers.Message other = (com.aihangxunxi.aitalk.im.protocol.buffers.Message) obj;

    if (getMagic()
        != other.getMagic()) return false;
    if (getVersion()
        != other.getVersion()) return false;
    if (opCode_ != other.opCode_) return false;
    if (getSeq()
        != other.getSeq()) return false;
    if (!getPayloadCase().equals(other.getPayloadCase())) return false;
    switch (payloadCase_) {
      case 11:
        if (!getAuthRequest()
            .equals(other.getAuthRequest())) return false;
        break;
      case 12:
        if (!getAuthAck()
            .equals(other.getAuthAck())) return false;
        break;
      case 20:
        if (!getMsgRequest()
            .equals(other.getMsgRequest())) return false;
        break;
      case 0:
      default:
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + MAGIC_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getMagic());
    hash = (37 * hash) + VERSION_FIELD_NUMBER;
    hash = (53 * hash) + getVersion();
    hash = (37 * hash) + OP_CODE_FIELD_NUMBER;
    hash = (53 * hash) + opCode_;
    hash = (37 * hash) + SEQ_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getSeq());
    switch (payloadCase_) {
      case 11:
        hash = (37 * hash) + AUTH_REQUEST_FIELD_NUMBER;
        hash = (53 * hash) + getAuthRequest().hashCode();
        break;
      case 12:
        hash = (37 * hash) + AUTH_ACK_FIELD_NUMBER;
        hash = (53 * hash) + getAuthAck().hashCode();
        break;
      case 20:
        hash = (37 * hash) + MSG_REQUEST_FIELD_NUMBER;
        hash = (53 * hash) + getMsgRequest().hashCode();
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.aihangxunxi.aitalk.im.protocol.buffers.Message parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.aihangxunxi.aitalk.im.protocol.buffers.Message parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.aihangxunxi.aitalk.im.protocol.buffers.Message parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.aihangxunxi.aitalk.im.protocol.buffers.Message parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.aihangxunxi.aitalk.im.protocol.buffers.Message parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.aihangxunxi.aitalk.im.protocol.buffers.Message parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.aihangxunxi.aitalk.im.protocol.buffers.Message parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.aihangxunxi.aitalk.im.protocol.buffers.Message parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.aihangxunxi.aitalk.im.protocol.buffers.Message parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.aihangxunxi.aitalk.im.protocol.buffers.Message parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.aihangxunxi.aitalk.im.protocol.buffers.Message parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.aihangxunxi.aitalk.im.protocol.buffers.Message parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.aihangxunxi.aitalk.im.protocol.buffers.Message prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code com.aihangxunxi.aitalk.im.protocol.buffers.Message}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:com.aihangxunxi.aitalk.im.protocol.buffers.Message)
      com.aihangxunxi.aitalk.im.protocol.buffers.MessageOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.aihangxunxi.aitalk.im.protocol.buffers.MessageOuterClass.internal_static_com_aihangxunxi_aitalk_im_protocol_buffers_Message_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.aihangxunxi.aitalk.im.protocol.buffers.MessageOuterClass.internal_static_com_aihangxunxi_aitalk_im_protocol_buffers_Message_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.aihangxunxi.aitalk.im.protocol.buffers.Message.class, com.aihangxunxi.aitalk.im.protocol.buffers.Message.Builder.class);
    }

    // Construct using com.aihangxunxi.aitalk.im.protocol.buffers.Message.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      magic_ = 0L;

      version_ = 0;

      opCode_ = 0;

      seq_ = 0L;

      payloadCase_ = 0;
      payload_ = null;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.aihangxunxi.aitalk.im.protocol.buffers.MessageOuterClass.internal_static_com_aihangxunxi_aitalk_im_protocol_buffers_Message_descriptor;
    }

    @java.lang.Override
    public com.aihangxunxi.aitalk.im.protocol.buffers.Message getDefaultInstanceForType() {
      return com.aihangxunxi.aitalk.im.protocol.buffers.Message.getDefaultInstance();
    }

    @java.lang.Override
    public com.aihangxunxi.aitalk.im.protocol.buffers.Message build() {
      com.aihangxunxi.aitalk.im.protocol.buffers.Message result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.aihangxunxi.aitalk.im.protocol.buffers.Message buildPartial() {
      com.aihangxunxi.aitalk.im.protocol.buffers.Message result = new com.aihangxunxi.aitalk.im.protocol.buffers.Message(this);
      result.magic_ = magic_;
      result.version_ = version_;
      result.opCode_ = opCode_;
      result.seq_ = seq_;
      if (payloadCase_ == 11) {
        if (authRequestBuilder_ == null) {
          result.payload_ = payload_;
        } else {
          result.payload_ = authRequestBuilder_.build();
        }
      }
      if (payloadCase_ == 12) {
        if (authAckBuilder_ == null) {
          result.payload_ = payload_;
        } else {
          result.payload_ = authAckBuilder_.build();
        }
      }
      if (payloadCase_ == 20) {
        if (msgRequestBuilder_ == null) {
          result.payload_ = payload_;
        } else {
          result.payload_ = msgRequestBuilder_.build();
        }
      }
      result.payloadCase_ = payloadCase_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.aihangxunxi.aitalk.im.protocol.buffers.Message) {
        return mergeFrom((com.aihangxunxi.aitalk.im.protocol.buffers.Message)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.aihangxunxi.aitalk.im.protocol.buffers.Message other) {
      if (other == com.aihangxunxi.aitalk.im.protocol.buffers.Message.getDefaultInstance()) return this;
      if (other.getMagic() != 0L) {
        setMagic(other.getMagic());
      }
      if (other.getVersion() != 0) {
        setVersion(other.getVersion());
      }
      if (other.opCode_ != 0) {
        setOpCodeValue(other.getOpCodeValue());
      }
      if (other.getSeq() != 0L) {
        setSeq(other.getSeq());
      }
      switch (other.getPayloadCase()) {
        case AUTH_REQUEST: {
          mergeAuthRequest(other.getAuthRequest());
          break;
        }
        case AUTH_ACK: {
          mergeAuthAck(other.getAuthAck());
          break;
        }
        case MSG_REQUEST: {
          mergeMsgRequest(other.getMsgRequest());
          break;
        }
        case PAYLOAD_NOT_SET: {
          break;
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.aihangxunxi.aitalk.im.protocol.buffers.Message parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.aihangxunxi.aitalk.im.protocol.buffers.Message) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int payloadCase_ = 0;
    private java.lang.Object payload_;
    public PayloadCase
        getPayloadCase() {
      return PayloadCase.forNumber(
          payloadCase_);
    }

    public Builder clearPayload() {
      payloadCase_ = 0;
      payload_ = null;
      onChanged();
      return this;
    }


    private long magic_ ;
    /**
     * <pre>
     *头部相关字段编号范围:1～10
     * </pre>
     *
     * <code>uint64 magic = 1;</code>
     * @return The magic.
     */
    @java.lang.Override
    public long getMagic() {
      return magic_;
    }
    /**
     * <pre>
     *头部相关字段编号范围:1～10
     * </pre>
     *
     * <code>uint64 magic = 1;</code>
     * @param value The magic to set.
     * @return This builder for chaining.
     */
    public Builder setMagic(long value) {
      
      magic_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     *头部相关字段编号范围:1～10
     * </pre>
     *
     * <code>uint64 magic = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearMagic() {
      
      magic_ = 0L;
      onChanged();
      return this;
    }

    private int version_ ;
    /**
     * <pre>
     * 版本号
     * </pre>
     *
     * <code>uint32 version = 2;</code>
     * @return The version.
     */
    @java.lang.Override
    public int getVersion() {
      return version_;
    }
    /**
     * <pre>
     * 版本号
     * </pre>
     *
     * <code>uint32 version = 2;</code>
     * @param value The version to set.
     * @return This builder for chaining.
     */
    public Builder setVersion(int value) {
      
      version_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 版本号
     * </pre>
     *
     * <code>uint32 version = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearVersion() {
      
      version_ = 0;
      onChanged();
      return this;
    }

    private int opCode_ = 0;
    /**
     * <pre>
     * 消息协议类型，操作码
     * </pre>
     *
     * <code>.com.aihangxunxi.aitalk.im.protocol.buffers.OpCode op_code = 3;</code>
     * @return The enum numeric value on the wire for opCode.
     */
    @java.lang.Override public int getOpCodeValue() {
      return opCode_;
    }
    /**
     * <pre>
     * 消息协议类型，操作码
     * </pre>
     *
     * <code>.com.aihangxunxi.aitalk.im.protocol.buffers.OpCode op_code = 3;</code>
     * @param value The enum numeric value on the wire for opCode to set.
     * @return This builder for chaining.
     */
    public Builder setOpCodeValue(int value) {
      
      opCode_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 消息协议类型，操作码
     * </pre>
     *
     * <code>.com.aihangxunxi.aitalk.im.protocol.buffers.OpCode op_code = 3;</code>
     * @return The opCode.
     */
    @java.lang.Override
    public com.aihangxunxi.aitalk.im.protocol.buffers.OpCode getOpCode() {
      @SuppressWarnings("deprecation")
      com.aihangxunxi.aitalk.im.protocol.buffers.OpCode result = com.aihangxunxi.aitalk.im.protocol.buffers.OpCode.valueOf(opCode_);
      return result == null ? com.aihangxunxi.aitalk.im.protocol.buffers.OpCode.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * 消息协议类型，操作码
     * </pre>
     *
     * <code>.com.aihangxunxi.aitalk.im.protocol.buffers.OpCode op_code = 3;</code>
     * @param value The opCode to set.
     * @return This builder for chaining.
     */
    public Builder setOpCode(com.aihangxunxi.aitalk.im.protocol.buffers.OpCode value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      opCode_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 消息协议类型，操作码
     * </pre>
     *
     * <code>.com.aihangxunxi.aitalk.im.protocol.buffers.OpCode op_code = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearOpCode() {
      
      opCode_ = 0;
      onChanged();
      return this;
    }

    private long seq_ ;
    /**
     * <pre>
     *序列号,主要用于保证Request和Ack,Notify的seq值必须相同，使得发送端可以进行事务匹配处理
     * </pre>
     *
     * <code>uint64 seq = 4;</code>
     * @return The seq.
     */
    @java.lang.Override
    public long getSeq() {
      return seq_;
    }
    /**
     * <pre>
     *序列号,主要用于保证Request和Ack,Notify的seq值必须相同，使得发送端可以进行事务匹配处理
     * </pre>
     *
     * <code>uint64 seq = 4;</code>
     * @param value The seq to set.
     * @return This builder for chaining.
     */
    public Builder setSeq(long value) {
      
      seq_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     *序列号,主要用于保证Request和Ack,Notify的seq值必须相同，使得发送端可以进行事务匹配处理
     * </pre>
     *
     * <code>uint64 seq = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearSeq() {
      
      seq_ = 0L;
      onChanged();
      return this;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.aihangxunxi.aitalk.im.protocol.buffers.AuthRequest, com.aihangxunxi.aitalk.im.protocol.buffers.AuthRequest.Builder, com.aihangxunxi.aitalk.im.protocol.buffers.AuthRequestOrBuilder> authRequestBuilder_;
    /**
     * <pre>
     * 连接相关11～20
     * </pre>
     *
     * <code>.com.aihangxunxi.aitalk.im.protocol.buffers.AuthRequest auth_request = 11;</code>
     * @return Whether the authRequest field is set.
     */
    @java.lang.Override
    public boolean hasAuthRequest() {
      return payloadCase_ == 11;
    }
    /**
     * <pre>
     * 连接相关11～20
     * </pre>
     *
     * <code>.com.aihangxunxi.aitalk.im.protocol.buffers.AuthRequest auth_request = 11;</code>
     * @return The authRequest.
     */
    @java.lang.Override
    public com.aihangxunxi.aitalk.im.protocol.buffers.AuthRequest getAuthRequest() {
      if (authRequestBuilder_ == null) {
        if (payloadCase_ == 11) {
          return (com.aihangxunxi.aitalk.im.protocol.buffers.AuthRequest) payload_;
        }
        return com.aihangxunxi.aitalk.im.protocol.buffers.AuthRequest.getDefaultInstance();
      } else {
        if (payloadCase_ == 11) {
          return authRequestBuilder_.getMessage();
        }
        return com.aihangxunxi.aitalk.im.protocol.buffers.AuthRequest.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * 连接相关11～20
     * </pre>
     *
     * <code>.com.aihangxunxi.aitalk.im.protocol.buffers.AuthRequest auth_request = 11;</code>
     */
    public Builder setAuthRequest(com.aihangxunxi.aitalk.im.protocol.buffers.AuthRequest value) {
      if (authRequestBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        payload_ = value;
        onChanged();
      } else {
        authRequestBuilder_.setMessage(value);
      }
      payloadCase_ = 11;
      return this;
    }
    /**
     * <pre>
     * 连接相关11～20
     * </pre>
     *
     * <code>.com.aihangxunxi.aitalk.im.protocol.buffers.AuthRequest auth_request = 11;</code>
     */
    public Builder setAuthRequest(
        com.aihangxunxi.aitalk.im.protocol.buffers.AuthRequest.Builder builderForValue) {
      if (authRequestBuilder_ == null) {
        payload_ = builderForValue.build();
        onChanged();
      } else {
        authRequestBuilder_.setMessage(builderForValue.build());
      }
      payloadCase_ = 11;
      return this;
    }
    /**
     * <pre>
     * 连接相关11～20
     * </pre>
     *
     * <code>.com.aihangxunxi.aitalk.im.protocol.buffers.AuthRequest auth_request = 11;</code>
     */
    public Builder mergeAuthRequest(com.aihangxunxi.aitalk.im.protocol.buffers.AuthRequest value) {
      if (authRequestBuilder_ == null) {
        if (payloadCase_ == 11 &&
            payload_ != com.aihangxunxi.aitalk.im.protocol.buffers.AuthRequest.getDefaultInstance()) {
          payload_ = com.aihangxunxi.aitalk.im.protocol.buffers.AuthRequest.newBuilder((com.aihangxunxi.aitalk.im.protocol.buffers.AuthRequest) payload_)
              .mergeFrom(value).buildPartial();
        } else {
          payload_ = value;
        }
        onChanged();
      } else {
        if (payloadCase_ == 11) {
          authRequestBuilder_.mergeFrom(value);
        }
        authRequestBuilder_.setMessage(value);
      }
      payloadCase_ = 11;
      return this;
    }
    /**
     * <pre>
     * 连接相关11～20
     * </pre>
     *
     * <code>.com.aihangxunxi.aitalk.im.protocol.buffers.AuthRequest auth_request = 11;</code>
     */
    public Builder clearAuthRequest() {
      if (authRequestBuilder_ == null) {
        if (payloadCase_ == 11) {
          payloadCase_ = 0;
          payload_ = null;
          onChanged();
        }
      } else {
        if (payloadCase_ == 11) {
          payloadCase_ = 0;
          payload_ = null;
        }
        authRequestBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * 连接相关11～20
     * </pre>
     *
     * <code>.com.aihangxunxi.aitalk.im.protocol.buffers.AuthRequest auth_request = 11;</code>
     */
    public com.aihangxunxi.aitalk.im.protocol.buffers.AuthRequest.Builder getAuthRequestBuilder() {
      return getAuthRequestFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * 连接相关11～20
     * </pre>
     *
     * <code>.com.aihangxunxi.aitalk.im.protocol.buffers.AuthRequest auth_request = 11;</code>
     */
    @java.lang.Override
    public com.aihangxunxi.aitalk.im.protocol.buffers.AuthRequestOrBuilder getAuthRequestOrBuilder() {
      if ((payloadCase_ == 11) && (authRequestBuilder_ != null)) {
        return authRequestBuilder_.getMessageOrBuilder();
      } else {
        if (payloadCase_ == 11) {
          return (com.aihangxunxi.aitalk.im.protocol.buffers.AuthRequest) payload_;
        }
        return com.aihangxunxi.aitalk.im.protocol.buffers.AuthRequest.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * 连接相关11～20
     * </pre>
     *
     * <code>.com.aihangxunxi.aitalk.im.protocol.buffers.AuthRequest auth_request = 11;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.aihangxunxi.aitalk.im.protocol.buffers.AuthRequest, com.aihangxunxi.aitalk.im.protocol.buffers.AuthRequest.Builder, com.aihangxunxi.aitalk.im.protocol.buffers.AuthRequestOrBuilder> 
        getAuthRequestFieldBuilder() {
      if (authRequestBuilder_ == null) {
        if (!(payloadCase_ == 11)) {
          payload_ = com.aihangxunxi.aitalk.im.protocol.buffers.AuthRequest.getDefaultInstance();
        }
        authRequestBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.aihangxunxi.aitalk.im.protocol.buffers.AuthRequest, com.aihangxunxi.aitalk.im.protocol.buffers.AuthRequest.Builder, com.aihangxunxi.aitalk.im.protocol.buffers.AuthRequestOrBuilder>(
                (com.aihangxunxi.aitalk.im.protocol.buffers.AuthRequest) payload_,
                getParentForChildren(),
                isClean());
        payload_ = null;
      }
      payloadCase_ = 11;
      onChanged();;
      return authRequestBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.aihangxunxi.aitalk.im.protocol.buffers.AuthAck, com.aihangxunxi.aitalk.im.protocol.buffers.AuthAck.Builder, com.aihangxunxi.aitalk.im.protocol.buffers.AuthAckOrBuilder> authAckBuilder_;
    /**
     * <pre>
     *    Ping ping = 13;
     *    Pong pong = 14;
     *    Disconnect disconnect = 15;
     * </pre>
     *
     * <code>.com.aihangxunxi.aitalk.im.protocol.buffers.AuthAck auth_ack = 12;</code>
     * @return Whether the authAck field is set.
     */
    @java.lang.Override
    public boolean hasAuthAck() {
      return payloadCase_ == 12;
    }
    /**
     * <pre>
     *    Ping ping = 13;
     *    Pong pong = 14;
     *    Disconnect disconnect = 15;
     * </pre>
     *
     * <code>.com.aihangxunxi.aitalk.im.protocol.buffers.AuthAck auth_ack = 12;</code>
     * @return The authAck.
     */
    @java.lang.Override
    public com.aihangxunxi.aitalk.im.protocol.buffers.AuthAck getAuthAck() {
      if (authAckBuilder_ == null) {
        if (payloadCase_ == 12) {
          return (com.aihangxunxi.aitalk.im.protocol.buffers.AuthAck) payload_;
        }
        return com.aihangxunxi.aitalk.im.protocol.buffers.AuthAck.getDefaultInstance();
      } else {
        if (payloadCase_ == 12) {
          return authAckBuilder_.getMessage();
        }
        return com.aihangxunxi.aitalk.im.protocol.buffers.AuthAck.getDefaultInstance();
      }
    }
    /**
     * <pre>
     *    Ping ping = 13;
     *    Pong pong = 14;
     *    Disconnect disconnect = 15;
     * </pre>
     *
     * <code>.com.aihangxunxi.aitalk.im.protocol.buffers.AuthAck auth_ack = 12;</code>
     */
    public Builder setAuthAck(com.aihangxunxi.aitalk.im.protocol.buffers.AuthAck value) {
      if (authAckBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        payload_ = value;
        onChanged();
      } else {
        authAckBuilder_.setMessage(value);
      }
      payloadCase_ = 12;
      return this;
    }
    /**
     * <pre>
     *    Ping ping = 13;
     *    Pong pong = 14;
     *    Disconnect disconnect = 15;
     * </pre>
     *
     * <code>.com.aihangxunxi.aitalk.im.protocol.buffers.AuthAck auth_ack = 12;</code>
     */
    public Builder setAuthAck(
        com.aihangxunxi.aitalk.im.protocol.buffers.AuthAck.Builder builderForValue) {
      if (authAckBuilder_ == null) {
        payload_ = builderForValue.build();
        onChanged();
      } else {
        authAckBuilder_.setMessage(builderForValue.build());
      }
      payloadCase_ = 12;
      return this;
    }
    /**
     * <pre>
     *    Ping ping = 13;
     *    Pong pong = 14;
     *    Disconnect disconnect = 15;
     * </pre>
     *
     * <code>.com.aihangxunxi.aitalk.im.protocol.buffers.AuthAck auth_ack = 12;</code>
     */
    public Builder mergeAuthAck(com.aihangxunxi.aitalk.im.protocol.buffers.AuthAck value) {
      if (authAckBuilder_ == null) {
        if (payloadCase_ == 12 &&
            payload_ != com.aihangxunxi.aitalk.im.protocol.buffers.AuthAck.getDefaultInstance()) {
          payload_ = com.aihangxunxi.aitalk.im.protocol.buffers.AuthAck.newBuilder((com.aihangxunxi.aitalk.im.protocol.buffers.AuthAck) payload_)
              .mergeFrom(value).buildPartial();
        } else {
          payload_ = value;
        }
        onChanged();
      } else {
        if (payloadCase_ == 12) {
          authAckBuilder_.mergeFrom(value);
        }
        authAckBuilder_.setMessage(value);
      }
      payloadCase_ = 12;
      return this;
    }
    /**
     * <pre>
     *    Ping ping = 13;
     *    Pong pong = 14;
     *    Disconnect disconnect = 15;
     * </pre>
     *
     * <code>.com.aihangxunxi.aitalk.im.protocol.buffers.AuthAck auth_ack = 12;</code>
     */
    public Builder clearAuthAck() {
      if (authAckBuilder_ == null) {
        if (payloadCase_ == 12) {
          payloadCase_ = 0;
          payload_ = null;
          onChanged();
        }
      } else {
        if (payloadCase_ == 12) {
          payloadCase_ = 0;
          payload_ = null;
        }
        authAckBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     *    Ping ping = 13;
     *    Pong pong = 14;
     *    Disconnect disconnect = 15;
     * </pre>
     *
     * <code>.com.aihangxunxi.aitalk.im.protocol.buffers.AuthAck auth_ack = 12;</code>
     */
    public com.aihangxunxi.aitalk.im.protocol.buffers.AuthAck.Builder getAuthAckBuilder() {
      return getAuthAckFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     *    Ping ping = 13;
     *    Pong pong = 14;
     *    Disconnect disconnect = 15;
     * </pre>
     *
     * <code>.com.aihangxunxi.aitalk.im.protocol.buffers.AuthAck auth_ack = 12;</code>
     */
    @java.lang.Override
    public com.aihangxunxi.aitalk.im.protocol.buffers.AuthAckOrBuilder getAuthAckOrBuilder() {
      if ((payloadCase_ == 12) && (authAckBuilder_ != null)) {
        return authAckBuilder_.getMessageOrBuilder();
      } else {
        if (payloadCase_ == 12) {
          return (com.aihangxunxi.aitalk.im.protocol.buffers.AuthAck) payload_;
        }
        return com.aihangxunxi.aitalk.im.protocol.buffers.AuthAck.getDefaultInstance();
      }
    }
    /**
     * <pre>
     *    Ping ping = 13;
     *    Pong pong = 14;
     *    Disconnect disconnect = 15;
     * </pre>
     *
     * <code>.com.aihangxunxi.aitalk.im.protocol.buffers.AuthAck auth_ack = 12;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.aihangxunxi.aitalk.im.protocol.buffers.AuthAck, com.aihangxunxi.aitalk.im.protocol.buffers.AuthAck.Builder, com.aihangxunxi.aitalk.im.protocol.buffers.AuthAckOrBuilder> 
        getAuthAckFieldBuilder() {
      if (authAckBuilder_ == null) {
        if (!(payloadCase_ == 12)) {
          payload_ = com.aihangxunxi.aitalk.im.protocol.buffers.AuthAck.getDefaultInstance();
        }
        authAckBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.aihangxunxi.aitalk.im.protocol.buffers.AuthAck, com.aihangxunxi.aitalk.im.protocol.buffers.AuthAck.Builder, com.aihangxunxi.aitalk.im.protocol.buffers.AuthAckOrBuilder>(
                (com.aihangxunxi.aitalk.im.protocol.buffers.AuthAck) payload_,
                getParentForChildren(),
                isClean());
        payload_ = null;
      }
      payloadCase_ = 12;
      onChanged();;
      return authAckBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.aihangxunxi.aitalk.im.protocol.buffers.MsgRequest, com.aihangxunxi.aitalk.im.protocol.buffers.MsgRequest.Builder, com.aihangxunxi.aitalk.im.protocol.buffers.MsgRequestOrBuilder> msgRequestBuilder_;
    /**
     * <pre>
     * 消息相关21～50
     * </pre>
     *
     * <code>.com.aihangxunxi.aitalk.im.protocol.buffers.MsgRequest msg_request = 20;</code>
     * @return Whether the msgRequest field is set.
     */
    @java.lang.Override
    public boolean hasMsgRequest() {
      return payloadCase_ == 20;
    }
    /**
     * <pre>
     * 消息相关21～50
     * </pre>
     *
     * <code>.com.aihangxunxi.aitalk.im.protocol.buffers.MsgRequest msg_request = 20;</code>
     * @return The msgRequest.
     */
    @java.lang.Override
    public com.aihangxunxi.aitalk.im.protocol.buffers.MsgRequest getMsgRequest() {
      if (msgRequestBuilder_ == null) {
        if (payloadCase_ == 20) {
          return (com.aihangxunxi.aitalk.im.protocol.buffers.MsgRequest) payload_;
        }
        return com.aihangxunxi.aitalk.im.protocol.buffers.MsgRequest.getDefaultInstance();
      } else {
        if (payloadCase_ == 20) {
          return msgRequestBuilder_.getMessage();
        }
        return com.aihangxunxi.aitalk.im.protocol.buffers.MsgRequest.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * 消息相关21～50
     * </pre>
     *
     * <code>.com.aihangxunxi.aitalk.im.protocol.buffers.MsgRequest msg_request = 20;</code>
     */
    public Builder setMsgRequest(com.aihangxunxi.aitalk.im.protocol.buffers.MsgRequest value) {
      if (msgRequestBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        payload_ = value;
        onChanged();
      } else {
        msgRequestBuilder_.setMessage(value);
      }
      payloadCase_ = 20;
      return this;
    }
    /**
     * <pre>
     * 消息相关21～50
     * </pre>
     *
     * <code>.com.aihangxunxi.aitalk.im.protocol.buffers.MsgRequest msg_request = 20;</code>
     */
    public Builder setMsgRequest(
        com.aihangxunxi.aitalk.im.protocol.buffers.MsgRequest.Builder builderForValue) {
      if (msgRequestBuilder_ == null) {
        payload_ = builderForValue.build();
        onChanged();
      } else {
        msgRequestBuilder_.setMessage(builderForValue.build());
      }
      payloadCase_ = 20;
      return this;
    }
    /**
     * <pre>
     * 消息相关21～50
     * </pre>
     *
     * <code>.com.aihangxunxi.aitalk.im.protocol.buffers.MsgRequest msg_request = 20;</code>
     */
    public Builder mergeMsgRequest(com.aihangxunxi.aitalk.im.protocol.buffers.MsgRequest value) {
      if (msgRequestBuilder_ == null) {
        if (payloadCase_ == 20 &&
            payload_ != com.aihangxunxi.aitalk.im.protocol.buffers.MsgRequest.getDefaultInstance()) {
          payload_ = com.aihangxunxi.aitalk.im.protocol.buffers.MsgRequest.newBuilder((com.aihangxunxi.aitalk.im.protocol.buffers.MsgRequest) payload_)
              .mergeFrom(value).buildPartial();
        } else {
          payload_ = value;
        }
        onChanged();
      } else {
        if (payloadCase_ == 20) {
          msgRequestBuilder_.mergeFrom(value);
        }
        msgRequestBuilder_.setMessage(value);
      }
      payloadCase_ = 20;
      return this;
    }
    /**
     * <pre>
     * 消息相关21～50
     * </pre>
     *
     * <code>.com.aihangxunxi.aitalk.im.protocol.buffers.MsgRequest msg_request = 20;</code>
     */
    public Builder clearMsgRequest() {
      if (msgRequestBuilder_ == null) {
        if (payloadCase_ == 20) {
          payloadCase_ = 0;
          payload_ = null;
          onChanged();
        }
      } else {
        if (payloadCase_ == 20) {
          payloadCase_ = 0;
          payload_ = null;
        }
        msgRequestBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * 消息相关21～50
     * </pre>
     *
     * <code>.com.aihangxunxi.aitalk.im.protocol.buffers.MsgRequest msg_request = 20;</code>
     */
    public com.aihangxunxi.aitalk.im.protocol.buffers.MsgRequest.Builder getMsgRequestBuilder() {
      return getMsgRequestFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * 消息相关21～50
     * </pre>
     *
     * <code>.com.aihangxunxi.aitalk.im.protocol.buffers.MsgRequest msg_request = 20;</code>
     */
    @java.lang.Override
    public com.aihangxunxi.aitalk.im.protocol.buffers.MsgRequestOrBuilder getMsgRequestOrBuilder() {
      if ((payloadCase_ == 20) && (msgRequestBuilder_ != null)) {
        return msgRequestBuilder_.getMessageOrBuilder();
      } else {
        if (payloadCase_ == 20) {
          return (com.aihangxunxi.aitalk.im.protocol.buffers.MsgRequest) payload_;
        }
        return com.aihangxunxi.aitalk.im.protocol.buffers.MsgRequest.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * 消息相关21～50
     * </pre>
     *
     * <code>.com.aihangxunxi.aitalk.im.protocol.buffers.MsgRequest msg_request = 20;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.aihangxunxi.aitalk.im.protocol.buffers.MsgRequest, com.aihangxunxi.aitalk.im.protocol.buffers.MsgRequest.Builder, com.aihangxunxi.aitalk.im.protocol.buffers.MsgRequestOrBuilder> 
        getMsgRequestFieldBuilder() {
      if (msgRequestBuilder_ == null) {
        if (!(payloadCase_ == 20)) {
          payload_ = com.aihangxunxi.aitalk.im.protocol.buffers.MsgRequest.getDefaultInstance();
        }
        msgRequestBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.aihangxunxi.aitalk.im.protocol.buffers.MsgRequest, com.aihangxunxi.aitalk.im.protocol.buffers.MsgRequest.Builder, com.aihangxunxi.aitalk.im.protocol.buffers.MsgRequestOrBuilder>(
                (com.aihangxunxi.aitalk.im.protocol.buffers.MsgRequest) payload_,
                getParentForChildren(),
                isClean());
        payload_ = null;
      }
      payloadCase_ = 20;
      onChanged();;
      return msgRequestBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:com.aihangxunxi.aitalk.im.protocol.buffers.Message)
  }

  // @@protoc_insertion_point(class_scope:com.aihangxunxi.aitalk.im.protocol.buffers.Message)
  private static final com.aihangxunxi.aitalk.im.protocol.buffers.Message DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.aihangxunxi.aitalk.im.protocol.buffers.Message();
  }

  public static com.aihangxunxi.aitalk.im.protocol.buffers.Message getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Message>
      PARSER = new com.google.protobuf.AbstractParser<Message>() {
    @java.lang.Override
    public Message parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new Message(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<Message> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Message> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.aihangxunxi.aitalk.im.protocol.buffers.Message getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

